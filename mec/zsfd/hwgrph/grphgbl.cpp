/** @file grphgbl.cpp
 * implementation of the global data and object for grph library
 */

#include "inc/grphgbl.h"
#include "inc/fmttext.h"

using namespace zas::utils;

namespace zas {
namespace hwgrph {

gblconfig::gblconfig()
: _shared_ctx(EGL_NO_CONTEXT)
, _shared_cfg(NULL)
, _shared_dpy(EGL_NO_DISPLAY)
, _rsrc_ctx(EGL_NO_CONTEXT)
, _flags(0)
{
	check_binary_shader_support();
	check_FBO_multisample_support();
	_gblfontcacher.addref();
}

gblconfig::~gblconfig()
{
	// the _gblfontcacher will automatically destroyed
}

gblconfig* gblconfig::inst(void)
{
	static gblconfig gblconf;
	return &gblconf;
}

bool gblconfig::check_binary_shader_support(void)
{
	GLint formats = 0;
	glGetIntegerv(GL_NUM_PROGRAM_BINARY_FORMATS_OES, &formats);
	_f.binary_shader_supported = (formats < 1) ? 0 : 1;

	if (_f.binary_shader_supported) {
		_glProgramBinaryOES = (PFNGLPROGRAMBINARYOESPROC)
			eglGetProcAddress("glProgramBinaryOES");
		_glGetProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC)
			eglGetProcAddress("glGetProgramBinaryOES");
		if (NULL == _glProgramBinaryOES || NULL == _glGetProgramBinaryOES) {
			printf("Fail to retrive glsl binary operation extension.\n");
			exit(9940);
		}
		return true;
	}
	else {
		_glProgramBinaryOES = NULL;
		_glGetProgramBinaryOES = NULL;
		return false;
	}
}

bool gblconfig::check_FBO_multisample_support(void)
{
	glRenderbufferStorageMultisampleEXT = NULL;
	glFramebufferTexture2DMultisampleEXT = NULL;
	const char* glextstr = (const char*)glGetString(GL_EXTENSIONS);
	if (NULL == glextstr) return false;

	if(strstr(glextstr, "GL_IMG_multisampled_render_to_texture"))
	{
		glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC)
			eglGetProcAddress("glRenderbufferStorageMultisampleIMG");
		glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC)
			eglGetProcAddress("glFramebufferTexture2DMultisampleIMG");
		assert(NULL != glRenderbufferStorageMultisampleIMG \
			&& NULL != glFramebufferTexture2DMultisampleIMG);
		_f.IMG_render_to_texture = 1;
		_f.RTT_multisampleing_supported = 1;
		printf("GL_IMG_multisampled_render_to_texture supported\n");
	}
	else if(strstr(glextstr, "GL_EXT_multisampled_render_to_texture"))
	{
		glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)
			eglGetProcAddress("glRenderbufferStorageMultisampleEXT");
		glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)
			eglGetProcAddress("glFramebufferTexture2DMultisampleEXT");
		assert(NULL != glRenderbufferStorageMultisampleEXT \
			&& NULL != glFramebufferTexture2DMultisampleEXT);
		_f.EXT_render_to_texture = 1;
		_f.RTT_multisampleing_supported = 1;
		printf("GL_EXT_multisampled_render_to_texture supported\n");
	}
	return (_f.RTT_multisampleing_supported) ? true : false;
}

void gblconfig::rsrc_context_creator::run(void)
{
	int glsl_load(void);

	_ret = self()->create_rsrc_context();
	if (!_ret) _ret = glsl_load();
	_wobj.lock();
	_wobj.notify();
	_wobj.unlock();
}

int gblconfig::rsrc_context_creator::execute(void)
{
	_wobj.lock();
	int ret = evloop::inst()->addtask("generic-tasklet", this);
	if (ret < 0) {
		_wobj.unlock();
		return ret;
	}
	bool wret = _wobj.wait(1000);
	_wobj.unlock();
	if (!wret) return -ETIMEOUT;
	return _ret;
}

void gblconfig::rsrc_context_creator::release(void) {}

int gblconfig::bind(EGLDisplay dpy, EGLConfig cfg, EGLContext ctx)
{
	if (!dpy || !cfg || !ctx) {
		return -EBADPARM;
	}
	if (_rsrc_ctx != EGL_NO_CONTEXT) {
		return -EEXISTS;
	}
	_shared_dpy = dpy;
	_shared_ctx = ctx;
	_shared_cfg = cfg;

	return _rcc.execute();
}

int gblconfig::create_rsrc_context(void)
{
	if (EGL_NO_CONTEXT != _rsrc_ctx)
		return 0;

	EGLint major, minor;
	if (!eglInitialize(_shared_dpy, &major, &minor)) {
		return -1;
	}

	static const EGLint context_attribs[] = {
		EGL_CONTEXT_CLIENT_VERSION, 2,
		EGL_NONE
	};

	_rsrc_ctx = eglCreateContext(_shared_dpy, _shared_cfg, _shared_ctx, context_attribs);
	assert(EGL_NO_CONTEXT != _rsrc_ctx);

	if (!eglMakeCurrent(_shared_dpy, EGL_NO_SURFACE,
		EGL_NO_SURFACE, _rsrc_ctx)) {
		return -2;
	}

	return 0;
}

double gblconfig::_guass_weight_table[] =
{
	// radius: 3, compressed: 2
	0.0000000000000, 1.3846153846154, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.2270270270270, 0.3162162162162, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 5, compressed: 3
	0.0000000000000, 1.4400000000000, 3.3600000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.1622528711521, 0.2674497876134, 0.1225811526561, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 13, compressed: 4
	0.0000000000000, 1.4634146341463, 3.4146341463415, 5.3658536585366, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.1261816032950, 0.2239586898310, 0.1387570143518, 0.0580644736980, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 25, compressed: 5
	0.0000000000000, 1.4782608695652, 3.4492753623188, 5.4202898550725, 7.3913043478261, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0974096421945, 0.1813674766574, 0.1362191005336, 0.0812075407027, 0.0382929866728, 0.0000000000000, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 41, compressed: 6
	0.0000000000000, 1.4862385321101, 3.4678899082569, 5.4495412844037, 7.4311926605505, 9.4128440366972, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0778246454045, 0.1487259294970, 0.1239832612503, 0.0893099763244, 0.0555412650225, 0.0297817993498, 0.0000000000000,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 61, compressed: 7
	0.0000000000000, 1.4904458598726, 3.4777070063694, 5.4649681528662, 7.4522292993631, 9.4394904458599, 11.4267515923567,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0650776205659, 0.1260981869383, 0.1111000587116, 0.0884402360656, 0.0635898605692, 0.0412802517018, 0.0241806418208,
	0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 89, compressed: 8
	0.0000000000000, 1.4930875576037, 3.4838709677419, 5.4746543778802, 7.4654377880184, 9.4562211981567, 11.4470046082949,
	13.4377880184332, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0555893824820, 0.1086566111633, 0.0991299295217, 0.0840318918163, 0.0661798392370, 0.0484149193317, 0.0328936657813,
	0.0207496149407, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 123, compressed: 9
	0.0000000000000, 1.4948805460751, 3.4880546075085, 5.4812286689420, 7.4744027303754, 9.4675767918089, 11.4607508532423,
	13.4539249146758, 15.4470989761092, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0481051315325, 0.0945873008226, 0.0883661226477, 0.0781789162811, 0.0654974877935, 0.0519591733190, 0.0390269820721,
	0.0277514978649, 0.0186797521861, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 165, compressed: 10
	0.0000000000000, 1.4961038961039, 3.4909090909091, 5.4857142857143, 7.4805194805195, 9.4753246753247, 11.4701298701299,
	13.4649350649351, 15.4597402597403, 17.4545454545455, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0422220569195, 0.0833570441613, 0.0791477533389, 0.0720985994883, 0.0630083790804, 0.0528251126520, 0.0424851058145,
	0.0327768114477, 0.0242552667769, 0.0172157682988, 0.0000000000000, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 215, compressed: 11
	0.0000000000000, 1.4969574036511, 3.4929006085193, 5.4888438133874, 7.4847870182556, 9.4807302231237, 11.4766734279919,
	13.4726166328600, 15.4685598377282, 17.4645030425963, 19.4604462474645, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0375440245740, 0.0743317260723, 0.0713823387085, 0.0663648550258, 0.0597327069605, 0.0520483430963, 0.0439050451854,
	0.0358529616089, 0.0283417813566, 0.0216873897263, 0.0160638671073, 0.0000000000000, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 275, compressed: 12
	0.0000000000000, 1.4975845410628, 3.4943639291465, 5.4911433172303, 7.4879227053140, 9.4847020933977, 11.4814814814815,
	13.4782608695652, 15.4750402576490, 17.4718196457327, 19.4685990338164, 21.4653784219002, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	0.0336810483534, 0.0668226834293, 0.0647081706450, 0.0610690673773, 0.0561705050019, 0.0503520594700, 0.0439889995370,
	0.0374527752623, 0.0310764358552, 0.0251292168431, 0.0198024802084, 0.0152070333126, 0.0000000000000, 0.0000000000000,
	0.0000000000000,
	// radius: 345, compressed: 13
	0.0000000000000, 1.4980694980695, 3.4954954954955, 5.4929214929215, 7.4903474903475, 9.4877734877735, 11.4851994851995,
	13.4826254826255, 15.4800514800515, 17.4774774774775, 19.4749034749035, 21.4723294723295, 23.4697554697555, 0.0000000000000,
	0.0000000000000,
	0.0303646831519, 0.0603402756437, 0.0588088565179, 0.0561495030264, 0.0525189182315, 0.0481227863598, 0.0431965327035,
	0.0379846087752, 0.0327208153006, 0.0276118071389, 0.0228252683791, 0.0184834447119, 0.0146619260423, 0.0000000000000,
	0.0000000000000,
	// radius: 429, compressed: 14
	0.0000000000000, 1.4984326018809, 3.4963427377220, 5.4942528735632, 7.4921630094044, 9.4900731452456, 11.4879832810867,
	13.4858934169279, 15.4838035527691, 17.4817136886102, 19.4796238244514, 21.4775339602926, 23.4754440961337, 25.4733542319749,
	0.0000000000000,
	0.0275980214700, 0.0549086835829, 0.0537742360093, 0.0517909297841, 0.0490544984085, 0.0456929103944, 0.0418564679617,
	0.0377067220984, 0.0334053360815, 0.0291039500645, 0.0249358950922, 0.0210103155834, 0.0174089338656, 0.0141853776887,
	0.0000000000000,
	// radius: 497, compressed: 15
	0.0000000000000, 1.4984954864594, 3.4964894684052, 5.4944834503511, 7.4924774322969, 9.4904714142427, 11.4884653961886,
	13.4864593781344, 15.4844533600802, 17.4824473420261, 19.4804413239719, 21.4784353059178, 23.4764292878636, 25.4744232698094,
	27.4724172517553,
	0.0272028371360, 0.0541337549300, 0.0530596981149, 0.0511797783933, 0.0485812324500, 0.0453810383573, 0.0417171999895,
	0.0377389246267, 0.0335966625210, 0.0294329217087, 0.0253746105916, 0.0215274254864, 0.0179725292929, 0.0147655005995,
	0.0119373043702,
};

int gblconfig::get_gauss_weight(int count, double*& offsets, double*& weights)
{
	if (count < GAUSS_BLUR_RADIUS_MIN || count > GAUSS_BLUR_RADIUS_MAX) {
		return -EBADPARM;
	}
	count -= GAUSS_BLUR_RADIUS_MIN;
	offsets = &_guass_weight_table[count * GAUSS_BLUR_RADIUS_MAX * 2];
	weights = offsets + GAUSS_BLUR_RADIUS_MAX;
	return 0;
}


EGLContext bind_resource(void* display, void* conf, void* context)
{
	int ret = gblconfig::inst()->bind(
		reinterpret_cast<EGLDisplay>(display),
		reinterpret_cast<EGLConfig>(conf),
		reinterpret_cast<EGLContext>(context)
	);
	if (ret < 0 && ret != -EEXISTS) return NULL;
	return gblconfig::inst()->get_shared_context();
}

}} // end of namespace zas::hwgrph
/* EOF */
