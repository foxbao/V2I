
// Ceres Solver - A fast non-linear least squares minimizer
// Copyright 2015 Google Inc. All rights reserved.
// http://ceres-solver.org/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// * Neither the name of Google Inc. nor the names of its contributors may be
//   used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// Author: sameeragarwal@google.com (Sameer Agarwal)
//
// An example program that minimizes Powell's singular function.
//
//   F = 1/2 (f1^2 + f2^2 + f3^2 + f4^2)
//
//   f1 = x1 + 10*x2;
//   f2 = sqrt(5) * (x3 - x4)
//   f3 = (x2 - 2*x3)^2
//   f4 = sqrt(10) * (x1 - x4)^2
//
// The starting values are x1 = 3, x2 = -1, x3 = 0, x4 = 1.
// The minimum is 0 at (x1, x2, x3, x4) = 0.
//
// From: Testing Unconstrained Optimization Software by Jorge J. More, Burton S.
// Garbow and Kenneth E. Hillstrom in ACM Transactions on Mathematical Software,
// Vol 7(1), March 1981.
#include <vector>
#include "ceres/ceres.h"
#include "gflags/gflags.h"
#include "glog/logging.h"
using ceres::AutoDiffCostFunction;
using ceres::CostFunction;
using ceres::Problem;
using ceres::Solve;
using ceres::Solver;
struct F1
{
    template <typename T>
    bool operator()(const T *const x1, T *residual) const
    {
        // f1 = x1 + 10 * x2;
        residual[0] = x1[0] - 0.0;
        return true;
    }
};
struct F2
{
    template <typename T>
    bool operator()(const T *const x1, T *residual) const
    {
        // f2 = sqrt(5) (x3 - x4)
        // residual[0] = (x1[0])*(x1[0]) - 3;
        residual[0] = 6.0 - x1[0] * x1[0]*x1[0] - 3.0;
        return true;
    }
};
// struct F3 {
//   template <typename T>
//   bool operator()(const T* const x2, const T* const x3, T* residual) const {
//     // f3 = (x2 - 2 x3)^2
//     residual[0] = (x2[0] - 2.0 * x3[0]) * (x2[0] - 2.0 * x3[0]);
//     return true;
//   }
// };
// struct F4 {
//   template <typename T>
//   bool operator()(const T* const x1, const T* const x4, T* residual) const {
//     // f4 = sqrt(10) (x1 - x4)^2
//     residual[0] = sqrt(10.0) * (x1[0] - x4[0]) * (x1[0] - x4[0]);
//     return true;
//   }
// };
DEFINE_string(minimizer,
              "trust_region",
              "Minimizer type to use, choices are: line_search & trust_region");
int main(int argc, char **argv)
{
    GFLAGS_NAMESPACE::ParseCommandLineFlags(&argc, &argv, true);
    google::InitGoogleLogging(argv[0]);
    double x1 = 0.1;
    Problem problem;
    // Add residual terms to the problem using the autodiff
    // wrapper to get the derivatives automatically. The parameters, x1 through
    // x4, are modified in place.
    problem.AddResidualBlock(
        new AutoDiffCostFunction<F1, 1, 1>(new F1), nullptr, &x1);
    problem.AddResidualBlock(
        new AutoDiffCostFunction<F2, 1, 1>(new F2), nullptr, &x1);
    //   problem.AddResidualBlock(
    //       new AutoDiffCostFunction<F2, 1, 1>(new F2), nullptr, &x1);
    //   problem.AddResidualBlock(
    //       new AutoDiffCostFunction<F3, 1, 1, 1>(new F3), nullptr, &x2, &x3);
    //   problem.AddResidualBlock(
    //       new AutoDiffCostFunction<F4, 1, 1, 1>(new F4), nullptr, &x1, &x4);
    Solver::Options options;
    LOG_IF(FATAL,
           !ceres::StringToMinimizerType(CERES_GET_FLAG(FLAGS_minimizer),
                                         &options.minimizer_type))
        << "Invalid minimizer: " << CERES_GET_FLAG(FLAGS_minimizer)
        << ", valid options are: trust_region and line_search.";
    options.max_num_iterations = 100;
    options.linear_solver_type = ceres::DENSE_QR;
    options.minimizer_progress_to_stdout = true;
    // clang-format off
      std::cout << "Initial x1 = " << x1<<std::endl;
    // clang-format on
    // Run the solver!
    Solver::Summary summary;
    Solve(options, &problem, &summary);
    std::cout << summary.FullReport() << "\n";
    // clang-format off
      std::cout << "Final x1 = " << x1;
    // clang-format on
    return 0;
}

// #include <iostream>
// #include <eigen3/Eigen/Core>
// #include <eigen3/Eigen/Dense>

// int main() {
//     // Sample data points
//     Eigen::VectorXd x(5);
//     x << 1.0, 2.0, 3.0, 4.0, 5.0;
//     Eigen::VectorXd theta(4);
//     theta<<1,2,3,4;
//     Eigen::VectorXd y(5);
//     y << 1.0, 8.0, 27.0, 64.0, 125.0;

//     // Construct the Vandermonde matrix
//     Eigen::MatrixXd A(x.size(), 4);
//     for (int i = 0; i < x.size(); i++) {
//         A(i, 0) = x(i) * x(i) * x(i);
//         A(i, 1) = x(i) * x(i);
//         A(i, 2) = x(i);
//         A(i, 3) = 1.0;
//     }

//     // Solve the linear system
//     Eigen::VectorXd coefficients = A.colPivHouseholderQr().solve(y);

//     // Display the coefficients
//     std::cout << "Cubic Equation: y = " << coefficients(0) << "x^3 + " << coefficients(1) << "x^2 + " << coefficients(2) << "x + " << coefficients(3) << std::endl;

//     // Calculate and display the fitted values
//     std::cout << "Fitted Values:" << std::endl;
//     for (int i = 0; i < x.size(); i++) {
//         double fittedValue = coefficients(0) * x(i) * x(i) * x(i) + coefficients(1) * x(i) * x(i) + coefficients(2) * x(i) + coefficients(3);
//         std::cout << "x = " << x(i) << ", y = " << fittedValue << std::endl;
//     }
//     return 0;
// }
